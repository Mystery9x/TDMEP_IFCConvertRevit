<Window x:Class="TepscoIFCToRevit.UI.Views.SettingMappingUI"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:localConverter="clr-namespace:TepscoIFCToRevit.UI.ViewModels.Converter"
        xmlns:local="clr-namespace:TepscoIFCToRevit.UI.Views.SettingGroupUI"
        mc:Ignorable="d"
        Name ="SettingMappingDlg"
        Title="{Binding Title}" Height="650" Width="1350"
        MinHeight="650" MinWidth="1350"
        WindowStartupLocation="CenterScreen">

    <Window.Resources>

        <!-- Define the Local Converter -->
        <localConverter:NotiRowHeightConverter x:Key="NotiRowHeightConverter" />
        <localConverter:NotiRowWightConverter x:Key="NotiRowWightConverter" />
        <localConverter:NotiRowHiddenConverter x:Key="NotiRowHiddenConverter" />
        <localConverter:NotiHeightConverterRailings x:Key="NotiHeightConverterRailings" />

        <!-- Define the NormalButtonStyle style -->
        <Style x:Key="NormalButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="#607d8b" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="BorderBrush" Value="#607d8b" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Padding" Value="10,5" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                     BorderBrush="{TemplateBinding BorderBrush}"
                                     BorderThickness="{TemplateBinding BorderThickness}"
                                     CornerRadius="2">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#78909C" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#78909C" />
                                <Setter Property="Foreground" Value="Black" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Define the OutlinedButtonStyle style -->
        <Style x:Key="OutlinedButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Gray" />
            <Setter Property="BorderThickness" Value="2" />
            <Setter Property="Foreground" Value="Gray" />
            <Setter Property="Padding" Value="10,5" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                     BorderBrush="{TemplateBinding BorderBrush}"
                                     BorderThickness="{TemplateBinding BorderThickness}"
                                     CornerRadius="2">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#E0E0E0" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#B0B0B0" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Define the TabControl style -->
        <Style TargetType="TabControl" x:Key="NormalTabControl">
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="Margin" Value="0" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TabControl">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="Transparent">
                                <TabPanel Grid.Row="0" IsItemsHost="True" Background="Transparent" />
                            </Border>
                            <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter ContentSource="SelectedContent" />
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Define the TabItem style -->
        <Style TargetType="TabItem" x:Key="NormalTabItem">
            <Setter Property="Header" Value="{Binding Header}" />
            <Setter Property="Foreground" Value="DarkGray" />
            <Setter Property="Background" Value="#f0f0f0" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="Margin" Value="0" />
            <Setter Property="MinWidth" Value="100" />
            <Setter Property="MinHeight" Value="30" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TabItem">
                        <Grid>
                            <Border Name="Border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1,0,1,2">

                                <ContentPresenter x:Name="ContentSite"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Center"
                                                  ContentSource="Header"
                                                  Margin="10,2" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="#607d8b" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="0" />
                                <Setter Property="BorderBrush" Value="Gray" />
                                <Setter Property="Background" Value="#607d8b" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="#78909C" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Define the ImageTabItem style -->
        <Style TargetType="TabItem" x:Key="ImageTabItem">
            <Setter Property="Header" Value="{Binding Header}" />
            <Setter Property="Foreground" Value="DarkGray" />
            <Setter Property="Background" Value="#f0f0f0" />
            <Setter Property="Padding" Value="5" />
            <Setter Property="Margin" Value="0" />
            <Setter Property="MinWidth" Value="50" />
            <Setter Property="MinHeight" Value="50" />
            <Setter Property="Height" Value="80" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TabItem">
                        <Border Name="Border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1,0,1,0">

                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="2*" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>

                                <Image Grid.Row="0" Margin="0 5" Stretch="Uniform"
                                       Source="{Binding ImgSource, UpdateSourceTrigger=PropertyChanged}" />

                                <ContentPresenter Grid.Row="1" x:Name="ContentSite"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Center"
                                                  ContentSource="Header"
                                                  Margin="5 0" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="#607d8b" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="0" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="#78909C" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="3" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="#78909C" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Define the DropShadowEffect style -->
        <DropShadowEffect x:Key="MyShadowEffect"
                            Color="Black"
                            Direction="320"
                            ShadowDepth="5"
                            BlurRadius="10"
                            Opacity="0.5" />

        <!-- Define the SquareButton style -->
        <Style TargetType="Button" x:Key="SquareButton">
            <Setter Property="Margin" Value="0,0,5,0" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Width" Value="30" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Background" Value="#607d8b" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="40" Effect="{StaticResource MyShadowEffect}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#78909C" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#78909C" />
                                <Setter Property="Foreground" Value="Black" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Define the HintTextBox style -->
        <Style x:Key="HintTextBoxStyle" TargetType="TextBox">
            <Setter Property="Background" Value="White" />
            <Setter Property="BorderBrush" Value="Gray" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Padding" Value="5" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Grid>
                            <Border Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                CornerRadius="2">
                                <ScrollViewer x:Name="PART_ContentHost" />
                            </Border>
                            <TextBlock x:Name="HintText"
                                                    Text="File name"
                                                    Foreground="Gray"
                                                    Margin="10,0"
                                                    VerticalAlignment="Center"
                                                    Visibility="Collapsed"
                                                    IsHitTestVisible="False" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Text" Value="">
                                <Setter TargetName="HintText" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="Text" Value="{x:Null}">
                                <Setter TargetName="HintText" Property="Visibility" Value="Visible" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Define the TextBox style -->
        <Style x:Key="TextBoxStyle" TargetType="TextBox">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="FontWeight" Value="Medium" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="BorderBrush" Value="DarkGray" />
            <Setter Property="BorderThickness" Value="0 0 0 1" />
            <Setter Property="CaretBrush" Value="LightGray" />
            <Setter Property="Margin" Value="20 0 0 0" />
            <Setter Property="Padding" Value="4.5" />
            <Setter Property="Height" Value="Auto" />
            <Setter Property="Width" Value="Auto" />
            <Setter Property="MaxWidth" Value="250" />
            <Setter Property="MinWidth" Value="50" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Grid>
                            <Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2">
                                <ScrollViewer x:Name="PART_ContentHost" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="true">
                                <Setter Property="BorderBrush" Value="Black" />
                                <Setter Property="Foreground" Value="Black" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="BorderBrush" Value="DarkGray" />
                                <Setter Property="Foreground" Value="DarkGray" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Define the RoundedTextBox style -->
        <Style x:Key="RoundedTextBoxStyle" TargetType="TextBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border CornerRadius="0" BorderThickness="0" BorderBrush="Gray" Background="White">
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Define the DataGrid style -->
        <Style x:Key="NormalDataGridStyle" TargetType="DataGrid">
            <Setter Property="Background" Value="White" />
            <Setter Property="Foreground" Value="Gray" />
            <Setter Property="BorderBrush" Value="Gray" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="RowBackground" Value="White" />
            <Setter Property="AlternatingRowBackground" Value="#F0F0F0" />
            <Setter Property="HorizontalGridLinesBrush" Value="Gray" />
            <Setter Property="VerticalGridLinesBrush" Value="Gray" />
            <Setter Property="ColumnHeaderStyle">
                <Setter.Value>
                    <Style TargetType="DataGridColumnHeader">
                        <Setter Property="Background" Value="White" />
                        <Setter Property="Foreground" Value="Gray" />
                        <Setter Property="Padding" Value="10,5" />
                        <Setter Property="BorderThickness" Value="0,0,1,1" />
                        <Setter Property="BorderBrush" Value="Gray" />
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="CellStyle">
                <Setter.Value>
                    <Style TargetType="DataGridCell">
                        <Setter Property="Foreground" Value="Gray" />
                        <Setter Property="BorderBrush" Value="Gray" />
                        <Setter Property="BorderThickness" Value="0,0,1,1" />
                        <Setter Property="Background" Value="White" />
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="#D3D3D3" />
                                <Setter Property="Foreground" Value="Gray" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Define the ComboBoxToggleItem style -->
        <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="Border"
                    Grid.ColumnSpan="2"
                    CornerRadius="0"
                    Background="Transparent"
                    BorderBrush="Black"
                    BorderThickness="0 0 0 1" />

                <Path
                    x:Name="Arrow"
                    Grid.Column="1"
                    Fill="Black"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="Transparent" />
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="Transparent" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="Border" Property="Background" Value="Transparent" />
                    <Setter TargetName="Border" Property="BorderBrush" Value="DarkGray" />
                    <Setter Property="Foreground" Value="DarkGray" />
                    <Setter TargetName="Arrow" Property="Fill" Value="DarkGray" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- Define the ComboBoxTextBox style -->
        <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
            <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
        </ControlTemplate>

        <!-- Define the ComboBox style -->
        <Style TargetType="{x:Type ComboBox}" x:Key="ComboBoxStyle">
            <Setter Property="Foreground" Value="{Binding ForeGroundColor}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="FontWeight" Value="Medium" />
            <Setter Property="BorderThickness" Value="0 0 0 1" />
            <Setter Property="BorderBrush" Value="DarkGray" />
            <Setter Property="Margin" Value="5" />
            <Setter Property="Height" Value="Auto" />
            <Setter Property="MinWidth" Value="50" />
            <Setter Property="Width" Value="Auto" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="MaxDropDownHeight" Value="300" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <ToggleButton
                                Name="ToggleButton"
                                Template="{StaticResource ComboBoxToggleButton}"
                                Grid.Column="2"
                                Focusable="false"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press">
                            </ToggleButton>
                            <ContentPresenter Name="ContentSite" IsHitTestVisible="False"
                                              Content="{TemplateBinding SelectionBoxItem}"
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              Margin="3,3,30,3"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Left" MaxWidth="300" />
                            <TextBox x:Name="PART_EditableTextBox"
                                     Style="{x:Null}"
                                     Template="{StaticResource ComboBoxTextBox}"
                                     HorizontalAlignment="Left"
                                     VerticalAlignment="Stretch"
                                     Margin="3,3,30,3"
                                     Focusable="True"
                                     Background="Transparent"
                                     Foreground="Black"
                                     Visibility="Hidden"
                                     TextWrapping="Wrap"
                                     IsReadOnly="{TemplateBinding IsReadOnly}" />
                            <Popup
                                Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True"
                                Focusable="False"
                                PopupAnimation="Slide"
                                Width="Auto">

                                <Grid Name="DropDown"
                                      SnapsToDevicePixels="True"
                                      MinWidth="{TemplateBinding ActualWidth}"
                                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border
                                        x:Name="DropDownBorder"
                                        Background="White"
                                        BorderThickness="1"
                                        BorderBrush="Black" />
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#888888" />
                                <Setter Property="BorderThickness" Value="0 0 0 1" />
                                <Setter Property="BorderBrush" Value="#888888" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="True">
                                <Setter Property="Foreground" Value="Black" />
                                <Setter Property="BorderThickness" Value="0 0 0 1" />
                                <Setter Property="BorderBrush" Value="Black" />
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            </Trigger>
                            <Trigger Property="IsEditable"  Value="true">
                                <Setter Property="IsTabStop" Value="false" />
                                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                                <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Define the ComboBoxItem style -->
        <Style TargetType="{x:Type ComboBoxItem}" x:Key="comboBoxItemStyle">
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBoxItem">
                        <Border x:Name="Border" Background="White" BorderBrush="Gray" BorderThickness="0,0,0,1">
                            <TextBlock Text="{Binding ParamName}" Padding="5" Foreground="{Binding ForeGroundColor}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="LightGray" />
                            </Trigger>
                            <Trigger Property="IsHighlighted" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="LightGray" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Define the CheckkBox style -->
        <Style TargetType="CheckBox" x:Key="checkBoxStyle">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <StackPanel Orientation="Horizontal">
                            <Border Name="border"
                                    BorderThickness="1"
                                    BorderBrush="Black"
                                    Width="16"
                                    Height="16"
                                    Background="{TemplateBinding Background}">
                                <Path Name="checkMark"
                                  Data="M0,5 L2,7 L7,0"
                                  Stroke="Transparent"
                                  StrokeThickness="1.5" />
                            </Border>
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"
                                              Margin="5" />
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#607d8b" />
                                <Setter TargetName="checkMark" Property="Stroke" Value="White" />
                                <Setter TargetName="checkMark" Property="VerticalAlignment" Value="Center" />
                                <Setter TargetName="checkMark" Property="HorizontalAlignment" Value="Center" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="checkMark" Property="Stroke" Value="Transparent" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Custom Style for RadioButton -->
        <Style TargetType="RadioButton" x:Key="CustomRadioButtonStyle">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <StackPanel Orientation="Horizontal">
                            <Border x:Name="OuterCircle"
                            Width="16" Height="16"
                            CornerRadius="10"
                            BorderBrush="#607d8b"
                            BorderThickness="1"
                            Background="White">
                                <Border x:Name="InnerCircle"
                                Width="10" Height="10"
                                CornerRadius="5"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Background="#607d8b"
                                Visibility="Hidden" />
                            </Border>
                            <ContentPresenter Margin="5,0,0,0" VerticalAlignment="Center" />
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="InnerCircle" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="InnerCircle" Property="Visibility" Value="Hidden" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.5" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Define the ToggleButton style -->
        <Style TargetType="{x:Type ToggleButton}">
            <Setter Property="Tag" Value="{DynamicResource {x:Static SystemParameters.HighContrastKey}}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Background" Value="Red" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="toggleBorder"
						 CornerRadius="10"
						 Background="#607d8b"

						 Width="43"
						 Height="22"
						 BorderThickness="0"
                                Padding="0"
						 BorderBrush="Transparent">
                            <Grid VerticalAlignment="Center">
                                <Path x:Name="path">
                                    <Path.Fill>
                                        <LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
                                            <GradientStop Color="White" />
                                        </LinearGradientBrush>
                                    </Path.Fill>
                                    <Path.Data>
                                        <GeometryGroup>
                                            <GeometryGroup.Children>
                                                <EllipseGeometry Center="25,9" RadiusX="8" RadiusY="8" />
                                            </GeometryGroup.Children>
                                        </GeometryGroup>
                                    </Path.Data>
                                </Path>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" Value="#607d8b" />
                                <Setter TargetName="toggleBorder" Property="Background" Value="#607d8b" />
                                <Setter TargetName="toggleBorder" Property="BorderBrush" Value="#607d8b" />
                                <Setter TargetName="path" Property="Data">
                                    <Setter.Value>
                                        <GeometryGroup>
                                            <GeometryGroup.Children>
                                                <EllipseGeometry Center="31,8" RadiusX="8" RadiusY="8" />
                                            </GeometryGroup.Children>
                                        </GeometryGroup>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="toggleBorder" Property="BorderBrush" Value="#FFB1B1B1" />
                                <Setter TargetName="toggleBorder" Property="BorderThickness" Value="1.5" />
                                <Setter TargetName="toggleBorder" Property="Background" Value="Transparent" />
                                <Setter TargetName="path" Property="Fill">
                                    <Setter.Value>
                                        <LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
                                            <GradientStop Color="Gray" />
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="path" Property="Data">
                                    <Setter.Value>
                                        <GeometryGroup>
                                            <GeometryGroup.Children>
                                                <EllipseGeometry Center="11,8" RadiusX="8" RadiusY="8" />
                                            </GeometryGroup.Children>
                                        </GeometryGroup>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Opacity" Value="0.9" />
                                <Setter TargetName="toggleBorder" Property="Opacity" Value="0.9" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="#607d8b" />
                                <Setter TargetName="toggleBorder" Property="BorderBrush" Value="#607d8b" />
                                <Setter TargetName="toggleBorder" Property="Background" Value="#607d8b" />
                                <Setter Property="Opacity" Value="0.8" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Window.Content>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="40" />
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="1"  VerticalAlignment="Center"
                        Orientation="Horizontal"  FlowDirection="RightToLeft"
                        Width="Auto">

                <Button Height="30" Width="90" Margin="5" FontSize="12"
                        Content="閉じる" IsCancel="True"
                        Style="{StaticResource NormalButtonStyle}"
                        Command="{Binding CancelCommand}"
                        CommandParameter="{Binding ElementName=SettingMappingDlg}">
                </Button>

                <Button Height="30" Width="90" Margin="5" FontSize="12"
                        Content="申し込み" Padding="0"
                        IsDefault="True"
                        Style="{StaticResource NormalButtonStyle}"
                        Command="{Binding ApplyCommand}"
                        CommandParameter="{Binding ElementName=SettingMappingDlg}">
                </Button>

                <Button Height="30" Width="90" Margin="5" FontSize="12"
                        Content="設定インポート" Padding="0"
                        IsDefault="True"
                        Command="{Binding ImportSettingCommand, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource NormalButtonStyle}"
                        CommandParameter="{Binding ElementName=SettingMappingDlg}">
                </Button>
                <Button Height="30" Width="90" Margin="5" FontSize="12"
                        Content="設定エクスポート" Padding="0"
                        IsDefault="True"
                        Style="{StaticResource NormalButtonStyle}"
                        Command="{Binding ExportSettingCommand}"
                        CommandParameter="{Binding ElementName=SettingMappingDlg}">
                </Button>
            </StackPanel>

            <TabControl Grid.Row="0" Name="MainTabControl"
                        HorizontalContentAlignment="Stretch" Margin="5"
                        Style="{StaticResource NormalTabControl}"
                        ItemsSource="{Binding MainTabs, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                        SelectedItem="{Binding SelectedTab, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}">

                <TabControl.ContentTemplate>
                    <DataTemplate>
                        <TabControl Grid.Row="0" Name="tabControl"
                                    HorizontalContentAlignment="Stretch"
                                    Style="{StaticResource NormalTabControl}"
                                    SelectedItem="{Binding SettingMain.SelectedSettingCategory, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"
                                    ItemsSource="{Binding SettingMain.SettingCategories, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}">

                            <TabControl.ContentTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>

                                        <Border BorderBrush="#808080" BorderThickness="2">
                                            <Grid Grid.Row="0" Margin="5">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>

                                                <StackPanel Grid.Column="1" Width="auto"
                                                            VerticalAlignment="Center"
                                                            Orientation="Horizontal"
                                                            FlowDirection="RightToLeft">

                                                    <Button x:Name="RemoveConditionCommand"
                                                            ToolTip="条件グループを削除"
                                                            Style="{StaticResource SquareButton}"
                                                            Command="{Binding RemoveConditionCommand}"
                                                            CommandParameter="{Binding ElementName=lvSetting}"
                                                            IsEnabled="{Binding DataContext.ControlsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}">
                                                        <materialDesign:PackIcon Kind="Minus" Height="21" Width="21" />
                                                    </Button>

                                                    <Button x:Name="AddConditionCommand"
                                                            ToolTip="条件グループを追加"
                                                            Command="{Binding AddConditionCommand}"
                                                            Style="{StaticResource SquareButton}"
                                                            CommandParameter="{Binding ElementName=lvSetting}"
                                                            IsEnabled="{Binding DataContext.ControlsEnabled,
                                                                        RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}">
                                                        <materialDesign:PackIcon Kind="Plus" Height="21" Width="21" />
                                                    </Button>

                                                    <Button ToolTip="条件グループ中に条件を削除"
                                                            Command="{Binding RemoveGroupConditionCommand}"
                                                            Style="{StaticResource SquareButton}"
                                                            CommandParameter="{Binding ElementName=lvSetting}"
                                                            IsEnabled="{Binding DataContext.ControlsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}">
                                                        <materialDesign:PackIcon Kind="NotebookRemove" Height="21" Width="21" />
                                                    </Button>

                                                    <Button ToolTip="条件グループ中に条件を追加"
                                                            Command="{Binding AddGroupConditionCommand}"
                                                            Style="{StaticResource SquareButton}"
                                                            CommandParameter="{Binding ElementName=lvSetting}"
                                                            IsEnabled="{Binding DataContext.ControlsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}">
                                                        <materialDesign:PackIcon Kind="NotebookPlus" Height="21" Width="21" />
                                                    </Button>

                                                    <ToggleButton Width="50" Height="30"
                                                                  Margin="5"
                                                                  HorizontalAlignment="Right"
                                                                  IsChecked="{Binding ToggleGroupSelection ,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}">
                                                    </ToggleButton>

                                                    <TextBlock Text="{Binding TextSelectionOrParam ,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"
                                                               Width="auto" Margin="5"
                                                               TextAlignment="Center" VerticalAlignment="Center" />
                                                </StackPanel>

                                                <Grid Grid.Column="0">
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition />
                                                        <RowDefinition Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                                                       Path=DataContext, Converter={StaticResource NotiHeightConverterRailings}}" />
                                                    </Grid.RowDefinitions>

                                                    <StackPanel Orientation="Horizontal" Grid.Row="0"
                                                                    FlowDirection="LeftToRight" Width="Auto">
                                                        <CheckBox Content="{Binding GetParaByCategory}"
                                                                  Name="ckbApplySetParam" Style="{StaticResource checkBoxStyle}"
                                                                  IsChecked="{Binding IsCheckedGetParamByCategory, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />

                                                        <Label Content="{Binding ContentParam, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                               Margin="20,0,0,0" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" />

                                                        <StackPanel Orientation="Horizontal"
                                                                    IsEnabled="{Binding ElementName=ckbApplySetParam, Path=IsChecked}">
                                                            <ComboBox Style="{StaticResource ComboBoxStyle}"
                                                                      SelectedItem="{Binding SelParaKey, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                                                      ItemsSource="{Binding KeyParam,UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                                                            </ComboBox>

                                                            <TextBox TextWrapping="Wrap"
                                                                     Style="{StaticResource TextBoxStyle}"
                                                                     Text="{Binding NameParameterInRevit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                                            </TextBox>

                                                            <TextBox TextWrapping="Wrap"
                                                                     Style="{StaticResource TextBoxStyle}"
                                                                     Text="{Binding ValueParameter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                                            </TextBox>
                                                        </StackPanel>
                                                    </StackPanel>

                                                    <StackPanel Grid.Row="1" Width="Auto" FlowDirection="LeftToRight" Orientation="Horizontal"
                                                                Visibility="{Binding IsVisibleCategoryRailing, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                                                        <CheckBox Content="{Binding GetElementByCategoryContent}" Name="ckbApplyAllElement" Style="{StaticResource checkBoxStyle}"
                                                                  IsChecked="{Binding IsCheckedGetEleByCategory ,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"
                                                                  IsEnabled="{Binding IsEnabledGetEleByCategory ,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}">
                                                        </CheckBox>

                                                        <Label Content="{Binding ContentSelect, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Foreground="{Binding ColorTextRailing}"
                                                               Margin="20,0,0,0" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" />

                                                        <StackPanel Orientation="Horizontal" IsEnabled="{Binding ElementName=ckbApplyAllElement, Path=IsChecked}">
                                                            <Grid>
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition />
                                                                    <ColumnDefinition Width="Auto" />
                                                                </Grid.ColumnDefinitions>

                                                                <ComboBox Grid.Column="0"
                                                                        Style="{StaticResource ComboBoxStyle}"
                                                                        Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DataContext.IsPipingSupport}"
                                                                        SelectedItem="{Binding SelFamily, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                                                        ItemsSource="{Binding SettingFamily, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                                                        Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                                                        Path=DataContext, Converter={StaticResource NotiRowHiddenConverter}}">
                                                                </ComboBox>

                                                                <ComboBox Grid.Column="1"
                                                                        Style="{StaticResource ComboBoxStyle}"
                                                                        SelectedItem="{Binding SelType, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                                                        ItemsSource="{Binding SettingType, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                                                        Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                                                        Path=DataContext, Converter={StaticResource NotiRowWightConverter}}"
                                                                        Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DataContext.VisibilitySelType}">
                                                                </ComboBox>
                                                            </Grid>
                                                        </StackPanel>
                                                    </StackPanel>
                                                </Grid>
                                            </Grid>
                                        </Border>

                                        <Border Grid.Row="1" Margin="0,5,0,0" BorderThickness="2" BorderBrush="Gray">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                                                    Path=DataContext, Converter={StaticResource NotiRowHeightConverter}}" />
                                                    <RowDefinition />
                                                </Grid.RowDefinitions>

                                                <Grid Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*" />
                                                        <ColumnDefinition Width="Auto" />
                                                        <ColumnDefinition Width="Auto" />
                                                        <ColumnDefinition Width="Auto" />
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Center"
                                                                Margin="5"
                                                                Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DataContext.NotificationColor}" TextWrapping="WrapWithOverflow"
                                                                Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DataContext.Notification}" />

                                                    <TextBlock Text="{Binding TextCreatePipeSupport ,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" Width="auto" Grid.Column="1" Margin="5"
                                                                TextAlignment="Center" VerticalAlignment="Center" HorizontalAlignment="Right"
                                                                Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DataContext.IsPipingSupport}" />

                                                    <ToggleButton Width="50" Height="30" Grid.Column="2" Margin="5"
                                                                    HorizontalAlignment="Right"
                                                                    FlowDirection = "RightToLeft"
                                                                    Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DataContext.IsPipingSupport}"
                                                                    IsChecked="{Binding IsCreateManual ,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}">
                                                    </ToggleButton>

                                                    <Button Grid.Column="3" Content="{Binding ContentLoadFamily}" HorizontalAlignment="Right"
                                                            ToolTip="配管サポートファミリがロード中"
                                                            Height="30" Width="100" Margin="20,5,25,5" FontSize="12"
                                                            Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DataContext.IsPipingSupport}"
                                                            Command="{Binding LoadFamilyCommand, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                            CommandParameter="{Binding ElementName=SettingMappingDlg}"
                                                            Style="{StaticResource NormalButtonStyle}">
                                                    </Button>
                                                </Grid>

                                                <Grid Grid.Row="1">
                                                    <ListView Name="lvSetting"
                                                            SelectionMode="Single"
                                                            SelectedItem="{Binding SelGrp , UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                                            ItemsSource="{Binding SettingGrps , UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">

                                                        <ListView.Resources>
                                                            <localConverter:RelativeWidthCoverter x:Key="relativeWidthConverter" />
                                                            <Style TargetType="ScrollBar">
                                                                <Setter Property="Background" Value="White" />
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding ElementName=scv_Properties, Path=ScrollableHeight}" Value="0">
                                                                        <Setter Property="Background" Value="DarkGray" />
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </ListView.Resources>

                                                        <ListView.Template>
                                                            <ControlTemplate>
                                                                <ScrollViewer Name="scv_Properties"
                                                                            VerticalScrollBarVisibility="Visible" Height="Auto"
                                                                            PreviewMouseWheel="ScrollViewer_PreviewMouseWheel">
                                                                    <ItemsPresenter>
                                                                    </ItemsPresenter>
                                                                </ScrollViewer>
                                                            </ControlTemplate>
                                                        </ListView.Template>

                                                        <ListView.ItemContainerStyle>
                                                            <Style TargetType="ListViewItem">
                                                                <Setter Property="HorizontalContentAlignment" Value="Left" />
                                                            </Style>
                                                        </ListView.ItemContainerStyle>

                                                        <ListView.ItemTemplate>
                                                            <DataTemplate>
                                                                <local:ShowGroupUI />
                                                            </DataTemplate>
                                                        </ListView.ItemTemplate>
                                                    </ListView>
                                                </Grid>
                                            </Grid>
                                        </Border>
                                    </Grid>
                                </DataTemplate>
                            </TabControl.ContentTemplate>

                            <TabControl.ItemContainerStyle>
                                <Style TargetType="TabItem" BasedOn="{StaticResource ImageTabItem}">
                                    <Setter Property="Header" Value="{Binding Header}" />
                                </Style>
                            </TabControl.ItemContainerStyle>
                        </TabControl>
                    </DataTemplate>
                </TabControl.ContentTemplate>

                <TabControl.ItemContainerStyle>
                    <Style TargetType="TabItem" BasedOn="{StaticResource NormalTabItem}">
                        <Setter Property="Header" Value="{Binding Header}" />
                    </Style>
                </TabControl.ItemContainerStyle>
            </TabControl>
        </Grid>
    </Window.Content>
</Window>